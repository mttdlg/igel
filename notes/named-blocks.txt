We foresee 'named blocks'.
They can contain anything, contents could be in IGEL-syntax
(but with a different semantics), or could be in a completely
different snyntax (in which case they are parsed as a string
and passed to a handler function associated with the identifier
used as the block's name).
They can also work as data embedded in the source.

{:asm:

    mov r1, 100      ; assign 100 to r1
loop:
    brz r1, endloop  ; Branch if zero
    sub r1, r1, 1    ; subtract 1 from r1
    jmp loop         ; jump to label 'loop'
endloop:

:asm:}

Int this case, {:asm:} could emit inline assembly.
It could also be useful for templates in other languages, possibly hinting
an editor as to which syntax to use (in the example above, the
contents could be syntax-colored based on assembly syntax)

The now-language will define what these named blocks expand to.

{:id: :id:} , [:id: ... :id:] and (:id: ... :id:) will all be supported.

Another possibility is prefixes:
prefix[ ... ]
prefix( ... )
We might support prefix{ ... }

Another possibility:
'prefixes' are associated to special behaviour
(asm{ ... })
'named blocks' are just fancy ways to define strings, we do not have
to register the ID in advance, we just make one up on the spot.
We look for a corresponding closing ID.
set x {:string-with-weird-quotes:
"
""
"""
""""
"""""
""""
"""
""
"
:string-with-weird-quotes:}

It would behave similarly to Python's r'...' string.
Could be used for regexps:

import regexp

const r = {:regex:  # There is nothing special about 'regex', it could
                    # be anything else like 'foobar', or even 'regexp',
                    # which is an existing identifier (we just imported
                    # a module with that name), provided that the block
                    # is ended with a closing :<ID>:} notation using the
                    # SAME :<ID>: as the opening brace.
                    # To reiterate: the <ID> between colons is not looked up,
                    # it is merely string-matched to find the corresponding
                    # closing named-brace.
                    
                    # NOTE: we will produce a string constant, so
                    # we will infer the type of 'r' as 'string'.

    ^           # match at beginning
        \s*     # zero or more whitespace characters
        [Hh]    # either "H" or "h"
        ello    # literal string "ello"
        \s*     # zero or more whitespace characters
        ,       # literal comma
        \s*     # zero or more whitespace characters
        [Ww]    # either "W" or "w"
        orld    # literal string "orld"
        \s*     # zero or more whitespace characters
        !       # literal exclamation mark
        \s*     # zero or more whitespace characters
    $           # match at end
:regex:}

set re [regexp.compile -verbose r] # in this case, 'regexp' is the name of a
                                   # module. It has nothing to do with the
                                   # ID used earlier. There is no conflict
                                   # between the two.

